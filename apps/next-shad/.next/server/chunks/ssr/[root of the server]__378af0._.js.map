{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":["file://E%3A/projects/side/boiler/ijyu-3166/apps/next-shad/apps/next-shad/next-i18next.config.mjs"],"sourcesContent":["const debugI18n = ['true', 1].includes(\n  process?.env?.NEXTJS_DEBUG_I18N ?? 'false'\n)\n\nconst localePublicFolder = undefined\n\nexport const defaultLocale = 'en'\n\nconst getLocalesPath = async () => {\n  if ('window' in globalThis) {\n    return localePublicFolder\n  }\n  const path = await import('path').then(mod => mod.default)\n  return path.resolve('../../packages/common-i18n/src/locales')\n}\n\nconst localePath = await getLocalesPath()\n\n/**\n * @type {import('next-i18next').UserConfig}\n */\nexport default {\n  i18n: {\n    defaultLocale,\n    locales: ['en', 'fr']\n  },\n  saveMissing: false,\n  strictMode: true,\n  serializeConfig: false,\n  reloadOnPrerender: process?.env?.NODE_ENV === 'development',\n  react: {\n    useSuspense: false\n  },\n  debug: debugI18n,\n  /*\n  interpolation: {\n    escapeValue: false,\n  },\n  */\n  localePath\n}\n"],"names":[],"mappings":";;;;AAAA,MAAM,YAAY;IAAC;IAAQ;CAAE,CAAC,QAAQ,CACpC,SAAS,KAAK,qBAAqB;AAGrC,MAAM,qBAAqB;AAEpB,MAAM,gBAAgB;AAE7B,MAAM,iBAAiB;IACrB,IAAI,YAAY,YAAY;QAC1B,OAAO;IACT;IACA,MAAM,OAAO,MAAM,qGAAe,IAAI,CAAC,CAAA,MAAO,IAAI,OAAO;IACzD,OAAO,KAAK,OAAO,CAAC;AACtB;AAEA,MAAM,aAAa,MAAM;uCAKV;IACb,MAAM;QACJ;QACA,SAAS;YAAC;YAAM;SAAK;IACvB;IACA,aAAa;IACb,YAAY;IACZ,iBAAiB;IACjB,mBAAmB,SAAS,KAAK,aAAa;IAC9C,OAAO;QACL,aAAa;IACf;IACA,OAAO;IACP;;;;EAIA,GACA;AACF"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file://E%3A/projects/side/boiler/ijyu-3166/apps/next-shad/apps/next-shad/src/lib/emotion/createEmotionCache.ts"],"sourcesContent":["import createCache, { type EmotionCache } from '@emotion/cache';\n\nconst isBrowser = typeof document !== 'undefined';\n\nexport const createEmotionCache = (): EmotionCache => {\n  let insertionPoint;\n  if (isBrowser) {\n    const emotionInsertionPoint = document.querySelector<HTMLMetaElement>(\n      'meta[name=\"emotion-insertion-point\"]'\n    );\n    insertionPoint = emotionInsertionPoint ?? undefined;\n  }\n  return createCache({ key: 'css', insertionPoint });\n};\n"],"names":[],"mappings":";;;AAAA;;;;;;AAEA,MAAM,YAAY,OAAO,aAAa;AAE/B,MAAM,qBAAqB;IAChC,IAAI;IACJ,IAAI,WAAW;QACb,MAAM,wBAAwB,SAAS,aAAa,CAClD;QAEF,iBAAiB,yBAAyB;IAC5C;IACA,OAAO,CAAA,GAAA,oIAAA,CAAA,UAAW,AAAD,EAAE;QAAE,KAAK;QAAO;IAAe;AAClD"}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file://E%3A/projects/side/boiler/ijyu-3166/apps/next-shad/apps/next-shad/src/providers/ReactQueryClientProvider.tsx"],"sourcesContent":["import { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport type { FC, PropsWithChildren } from 'react';\nimport { queryClientConfig } from '@/config/react-query.config';\n\nconst queryClient = new QueryClient(queryClientConfig);\n\ntype Props = PropsWithChildren;\n\nexport const ReactQueryClientProvider: FC<Props> = (props) => {\n  const { children } = props;\n  return (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;;;AAIA,MAAM,cAAc,IAAI,wJAAA,CAAA,cAAW,CAAC;AAI7B,MAAM,2BAAsC,CAAC;IAClD,MAAM,EAAE,QAAQ,EAAE,GAAG;IACrB,qBACE,qKAAC,wJAAA,CAAA,sBAAmB;QAAC,QAAQ;kBAAc;;;;;;AAE/C"}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file://E%3A/projects/side/boiler/ijyu-3166/apps/next-shad/apps/next-shad/src/providers/AppProviders.tsx"],"sourcesContent":["import { CacheProvider, type EmotionCache } from '@emotion/react';\nimport type { Session } from 'next-auth';\nimport { SessionProvider } from 'next-auth/react';\nimport type { FC, PropsWithChildren } from 'react';\n\nimport { createEmotionCache } from '@/lib/emotion';\nimport { ReactQueryClientProvider } from './ReactQueryClientProvider';\n\ntype Props = PropsWithChildren<{\n  /**\n   * next-auth session\n   */\n  session?: Session | null;\n  /**\n   * Optional emotion/cache to use\n   */\n  emotionCache?: EmotionCache;\n}>;\n\n// Client-side cache, shared for the whole session of the user in the browser.\nconst clientSideEmotionCache = createEmotionCache();\n\nexport const AppProviders: FC<Props> = (props) => {\n  const { children, session, emotionCache = clientSideEmotionCache } = props;\n  return (\n    <SessionProvider session={session} refetchInterval={0}>\n      <CacheProvider value={emotionCache}>\n        {/* Mui CssBaseline disabled in this example as tailwind provides its own */}\n        {/* <CssBaseline /> */}\n        <ReactQueryClientProvider>{children}</ReactQueryClientProvider>\n      </CacheProvider>\n    </SessionProvider>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AAEA;AAGA;AACA;AADA;;;;;;;;;;;;;AAcA,8EAA8E;AAC9E,MAAM,yBAAyB,CAAA,GAAA,4JAAA,CAAA,qBAAkB,AAAD;AAEzC,MAAM,eAA0B,CAAC;IACtC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,eAAe,sBAAsB,EAAE,GAAG;IACrE,qBACE,qKAAC,mIAAA,CAAA,kBAAe;QAAC,SAAS;QAAS,iBAAiB;kBAClD,cAAA,qKAAC,oIAAA,CAAA,gBAAa;YAAC,OAAO;sBAGpB,cAAA,qKAAC,8JAAA,CAAA,2BAAwB;0BAAE;;;;;;;;;;;;;;;;AAInC"}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":["file://E%3A/projects/side/boiler/ijyu-3166/apps/next-shad/apps/next-shad/src/pages/_app.tsx"],"sourcesContent":["import type { EmotionCache } from '@emotion/cache';\nimport { Analytics } from '@vercel/analytics/react';\nimport type { AppProps } from 'next/app';\nimport Head from 'next/head';\nimport { appWithTranslation } from 'next-i18next';\nimport nextI18nextConfig from '../../next-i18next.config.mjs';\nimport { AppProviders } from '../providers/AppProviders';\n\n/**\n * Import global styles, global css or polyfills here\n * i.e.: import '@/assets/theme/style.scss'\n */\nimport '../styles/globals.css';\n\nimport '@fontsource-variable/inter';\n\nexport type MyAppProps = AppProps & {\n  emotionCache?: EmotionCache;\n};\n\n/**\n * @link https://nextjs.org/docs/advanced-features/custom-app\n */\nconst MyApp = (appProps: MyAppProps) => {\n\n  const { Component, pageProps, emotionCache } = appProps;\n  return (\n    <AppProviders emotionCache={emotionCache}>\n      <Head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      </Head>\n      <Component {...pageProps} />\n      <Analytics />\n    </AppProviders>\n  );\n};\n\nexport default appWithTranslation(MyApp, {\n  ...nextI18nextConfig,\n});\n"],"names":[],"mappings":";;;;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAcA;;CAEC,GACD,MAAM,QAAQ,CAAC;IAEb,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG;IAC/C,qBACE,qKAAC,kJAAA,CAAA,eAAY;QAAC,cAAc;;0BAC1B,qKAAC,6HAAA,CAAA,UAAI;0BACH,cAAA,qKAAC;oBAAK,MAAK;oBAAW,SAAQ;;;;;;;;;;;0BAEhC,qKAAC;gBAAW,GAAG,SAAS;;;;;;0BACxB,qKAAC,4JAAA,CAAA,YAAS;;;;;;;;;;;AAGhB;uCAEe,CAAA,GAAA,uHAAA,CAAA,qBAAkB,AAAD,EAAE,OAAO;IACvC,GAAG,2IAAA,CAAA,UAAiB;AACtB"}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}